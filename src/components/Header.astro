---
import { getI18N } from "@/languages/index.ts";
import ThemeToggle from "./ThemeToggle.astro";

const { currentLocale } = Astro;
const i18n = getI18N({ currentLocale });
const navItems = [
	{
		title: "Web",
		label: "web",
		url: "/",
	},
	{
		title: "Blog",
		label: "blog",
		url: "/blog",
	},
	{
		title: i18n.PORTFOLIO,
		label: "about",
		url: "/portfolio#about",
	},
	{
		title: i18n.CONTACT,
		label: "contact",
		url: "#contact",
	},
];
---

<header class="fixed z-50 flex w-full justify-center">
	<div id="header" class="my-4 flex h-auto w-fit items-center gap-x-2 overflow-hidden rounded-2xl">
		<nav
			class="flex flex-row items-center justify-center text-center font-semibold text-slate-600 dark:text-slate-400"
		>
			{
				navItems.map((item) => (
					<a
						href={item.url}
						aria-label={item.label}
						class="inline-block h-full select-none p-2 transition hover:bg-slate-600/10 hover:text-cyan-600 dark:hover:bg-slate-300/10"
					>
						{item.title}
					</a>
				))
			}
		</nav>

		<ThemeToggle />
	</div>
</header>

<style>
	#header {
		animation: bgBlur linear both;
		animation-timeline: scroll();
		animation-range: 0 100px;
	}

	@keyframes bgBlur {
		to {
			background-color: rgb(148 163 184 / 0.1);
			@apply shadow-md backdrop-blur-3xl;
		}
	}
</style>

<script>
	document.addEventListener("astro:page-load", () => {
		const sections = document.querySelectorAll("section");
		const navItems = document.querySelectorAll("header nav a");

		const callback = (entries: any[]) => {
			entries.forEach((entry) => {
				if (entry.isIntersecting) {
					navItems.forEach((item) => {
						if (item.getAttribute("aria-label") == entry.target.id) {
							item.classList.add("text-cyan-600");
						} else {
							item.classList.remove("text-cyan-600");
						}
					});
				}
			});
		};

		const observer = new IntersectionObserver(callback, {
			root: null,
			rootMargin: "0px",
			threshold: 0.2,
		});

		sections.forEach((section) => {
			observer.observe(section);
		});

		document.onvisibilitychange = () => {
			if (document.visibilityState === "hidden") {
				observer.disconnect();
			} else {
				sections.forEach((section) => {
					observer.observe(section);
				});
			}
		};
	});
</script>
