---
import LinkButton from "@/components/LinkButton.astro";
import AlignCenter from "@/icons/AlignCenter.astro";
import AlignJustify from "@/icons/AlignJustify.astro";
import AlignLeft from "@/icons/AlignLeft.astro";
import AlignRight from "@/icons/AlignRight.astro";
import ArrowBackUp from "@/icons/ArrowBackUp.astro";
import ArrowForwardUp from "@/icons/ArrowForwardUp.astro";
import Bold from "@/icons/Bold.astro";
import Close from "@/icons/Close.astro";
import Code from "@/icons/Code.astro";
import Copy from "@/icons/Copy.astro";
import Italic from "@/icons/Italic.astro";
import Link from "@/icons/Link.astro";
import LinkOff from "@/icons/LinkOff.astro";
import Pen from "@/icons/Pen.astro";
import Send from "@/icons/Send.astro";
import StrikeThrough from "@/icons/StrikeThrough.astro";
import Underline from "@/icons/Underline.astro";
import { getI18N } from "@/languages/index";

const { currentLocale } = Astro;
const i18n = getI18N({ currentLocale });
---

<LinkButton id="add-story-button" title="Add story">
	<Pen class="size-4" />
</LinkButton>

<div
	id="modal"
	class="fixed bottom-0 left-0 top-0 z-50 hidden h-full w-full items-center justify-center bg-black/30 backdrop-blur-md"
>
	<div class="flex h-[90vh] w-11/12 flex-col rounded-3xl bg-slate-600/50 p-4">
		<div class="mb-4 flex items-center justify-between">
			<input
				required
				class="h-10 rounded-lg bg-slate-600/10 px-2 text-base font-normal text-slate-400 placeholder-slate-400 transition-colors ease-in-out autofill:!bg-yellow-200 focus:bg-slate-200/20 focus:outline-none placeholder:focus:invisible dark:focus:border-cyan-600"
				type="text"
				placeholder="Title"
			/>

			<Close
				id="close-modal-button"
				class="size-8 text-slate-200 active:scale-95 active:text-slate-400 sm:cursor-pointer sm:hover:scale-95 sm:hover:text-slate-400"
			/>
		</div>

		<div class="flex w-full flex-wrap items-center gap-2">
			<select
				id="formatBlock"
				class="h-8 w-fit cursor-pointer rounded-md bg-slate-600 px-1 text-base text-slate-200 outline-none"
			>
				<option class="text-base" value="" selected="" hidden="" disabled="">Format</option>
				<option value="h1">Heading 1</option>
				<option value="h2">Heading 2</option>
				<option value="h3">Heading 3</option>
				<option value="h4">Heading 4</option>
				<option value="h5">Heading 5</option>
				<option value="h6">Heading 6</option>
				<option value="p">Paragraph</option>
			</select>

			<select
				id="fontSize"
				class="h-8 w-fit cursor-pointer rounded-md bg-slate-600 px-1 text-base text-slate-200 outline-none"
			>
				<option value="" selected="" hidden="" disabled="">Font size</option>
				<option value="1">Extra small</option>
				<option value="2">Small</option>
				<option value="3">Regular</option>
				<option value="4">Medium</option>
				<option value="5">Large</option>
				<option value="6">Extra Large</option>
				<option value="7">Big</option>
			</select>

			<button
				id="undo"
				class="option-button rounded-xl bg-slate-600 px-2 py-1 text-slate-200 transition-colors active:bg-slate-600/70 sm:hover:bg-slate-600/70"
				><ArrowBackUp /></button
			>
			<button
				id="redo"
				class="option-button rounded-xl bg-slate-600 px-2 py-1 text-slate-200 transition-colors active:bg-slate-600/70 sm:hover:bg-slate-600/70"
				><ArrowForwardUp /></button
			>

			<button
				id="bold"
				class="option-button rounded-xl bg-slate-600 px-2 py-1 text-slate-200 transition-colors active:bg-slate-600/70 sm:hover:bg-slate-600/70"
				><Bold /></button
			>

			<button
				id="underline"
				class="option-button rounded-xl bg-slate-600 px-2 py-1 text-slate-200 transition-colors active:bg-slate-600/70 sm:hover:bg-slate-600/70"
				><Underline /></button
			>

			<button
				id="italic"
				class="option-button rounded-xl bg-slate-600 px-2 py-1 text-slate-200 transition-colors active:bg-slate-600/70 sm:hover:bg-slate-600/70"
				><Italic /></button
			>

			<button
				id="strikeThrough"
				class="option-button rounded-xl bg-slate-600 px-2 py-1 text-slate-200 transition-colors active:bg-slate-600/70 sm:hover:bg-slate-600/70"
				><StrikeThrough /></button
			>

			<button
				id="justifyLeft"
				class="option-button rounded-xl bg-slate-600 px-2 py-1 text-slate-200 transition-colors active:bg-slate-600/70 sm:hover:bg-slate-600/70"
				><AlignLeft /></button
			>

			<button
				id="justifyCenter"
				class="option-button rounded-xl bg-slate-600 px-2 py-1 text-slate-200 transition-colors active:bg-slate-600/70 sm:hover:bg-slate-600/70"
				><AlignCenter /></button
			>

			<button
				id="justifyRight"
				class="option-button rounded-xl bg-slate-600 px-2 py-1 text-slate-200 transition-colors active:bg-slate-600/70 sm:hover:bg-slate-600/70"
				><AlignRight /></button
			>

			<button
				id="justifyFull"
				class="option-button rounded-xl bg-slate-600 px-2 py-1 text-slate-200 transition-colors active:bg-slate-600/70 sm:hover:bg-slate-600/70"
				><AlignJustify /></button
			>

			<button
				id="add-link-button"
				class="rounded-xl bg-slate-600 px-2 py-1 text-slate-200 transition-colors active:bg-slate-600/70 sm:hover:bg-slate-600/70"
				><Link /></button
			>

			<button
				id="unlink"
				class="option-button rounded-xl bg-slate-600 px-2 py-1 text-slate-200 transition-colors active:bg-slate-600/70 sm:hover:bg-slate-600/70"
				><LinkOff /></button
			>

			<button
				class="rounded-xl bg-slate-600 px-2 py-1 text-slate-200 transition-colors active:bg-slate-600/70 sm:hover:bg-slate-600/70"
				id="show-code"
				data-active="false"><Code /></button
			>

			<button
				class="rounded-xl bg-slate-600 px-2 py-1 text-slate-200 transition-colors active:bg-slate-600/70 sm:hover:bg-slate-600/70"
				id="copy-code"
				data-active="false"><Copy /></button
			>
		</div>

		<div
			class="mt-2 h-full overflow-auto rounded-xl bg-slate-600/10 p-4 text-slate-200 outline-none"
			id="content"
			contenteditable="true"
			spellcheck="true"
		>
			<font size="4">Text...</font>
		</div>

		<div class="mt-2 flex w-full items-center justify-end">
			<LinkButton id="send-story-button">
				<Send class="size-4" />
				{i18n.SEND}
			</LinkButton>
		</div>
	</div>
</div>

<style is:inline>
	#show-code[data-active="true"] {
		@apply bg-slate-600/70;
	}
</style>

<script>
	import { $, $$ } from "@/lib/dom-selector.ts";

	document.addEventListener("astro:page-load", () => {
		const optionButtons = $$(".option-button") as NodeListOf<HTMLButtonElement>,
			addLinkButton = $("#add-link-button") as HTMLButtonElement,
			showCode = $("#show-code") as HTMLButtonElement,
			copyCode = $("#copy-code") as HTMLButtonElement,
			content = $("#content") as HTMLDivElement,
			formatBlock = $("#formatBlock") as HTMLSelectElement,
			fontSize = $("#fontSize") as HTMLSelectElement,
			addStoryButton = $("#add-story-button") as HTMLAnchorElement,
			modal = $("#modal") as HTMLDivElement,
			sendStoryButton = $("#send-story-button") as HTMLAnchorElement,
			closeModalButton = $("#close-modal-button");

		let active = false;

		optionButtons.forEach((button) => {
			button.addEventListener("click", () => {
				formatDoc(button.id);
			});
		});

		addLinkButton.addEventListener("click", () => {
			addLink();
		});

		formatBlock.addEventListener("change", () => {
			formatDoc(formatBlock.id, formatBlock.value);
		});

		fontSize.addEventListener("change", () => {
			formatDoc(fontSize.id, fontSize.value);
		});

		addStoryButton.addEventListener("click", () => {
			modal.classList.toggle("hidden");
			modal.classList.toggle("flex");
			document.body.classList.toggle("overflow-hidden");
		});

		modal.addEventListener("click", (e) => {
			if (e.target === modal) {
				modal.classList.toggle("hidden");
				modal.classList.toggle("flex");
				document.body.classList.toggle("overflow-hidden");
			}
		});

		sendStoryButton.addEventListener("click", () => {
			modal.classList.toggle("hidden");
			modal.classList.toggle("flex");
			document.body.classList.toggle("overflow-hidden");
		});

		copyCode.addEventListener("click", () => {
			navigator.clipboard.writeText(content.innerHTML.trim());
		});

		content.addEventListener("mouseenter", function () {
			const a = content.querySelectorAll("a");
			a.forEach((item) => {
				item.addEventListener("mouseenter", function () {
					content.setAttribute("contenteditable", "false");
					item.target = "_blank";
				});
				item.addEventListener("mouseleave", function () {
					content.setAttribute("contenteditable", "true");
				});
			});
		});

		showCode.addEventListener("click", function () {
			showCode.dataset.active = String(!active);
			active = !active;
			if (active) {
				content.textContent = content.innerHTML;
				content.setAttribute("contenteditable", "false");
			} else {
				content.innerHTML = String(content.textContent);
				content.setAttribute("contenteditable", "true");
			}
		});

		closeModalButton?.addEventListener("click", () => {
			modal.classList.toggle("hidden");
			modal.classList.toggle("flex");
			document.body.classList.toggle("overflow-hidden");
			content.innerHTML = `<font size="4">Text...</font>`;
		});

		function formatDoc(cmd: any, value: string | null = null) {
			if (value) {
				document.execCommand(cmd, false, value);
			} else {
				document.execCommand(cmd);
			}
		}

		function addLink() {
			const url = prompt("Insert url");
			formatDoc("createLink", url);
		}
	});
</script>
