---
import Blog from '@/icons/Blog.astro'
import Chat from '@/icons/Chat.astro'
import Timeline from '@/icons/Timeline.astro'
import WWW from '@/icons/WWW.astro'
import { getI18N } from '@/languages/index.ts'

const { currentLocale } = Astro
const i18n = getI18N({ currentLocale })
const navItems = [
	{
		title: 'Web',
		label: 'web',
		url: '/',
		icon: WWW,
	},
	{
		title: 'Blog',
		label: 'blog',
		url: '/blog',
		icon: Blog,
	},
	{
		title: i18n.PORTFOLIO,
		label: 'about',
		url: '/portfolio#about',
		icon: Timeline,
	},
	{
		title: i18n.CONTACT,
		label: 'contact',
		url: '#contact',
		icon: Chat,
	},
]
---

<header class='fixed z-50 flex w-full justify-center'>
	<div
		id='header'
		class='flex h-auto w-full items-center justify-center overflow-hidden border border-transparent py-6 transition-transform'
	>
		<nav
			class='text-primary flex flex-row items-center justify-center gap-2 text-center font-semibold md:gap-4'
		>
			{
				navItems.map((item) => (
					<a
						href={item.url}
						aria-label={item.label}
						class='hover:bg-secondary/5 md:hover:border-secondary/10 inline-flex h-full select-none items-center justify-center gap-2 rounded-3xl border border-transparent p-2 text-center transition-colors md:p-4'
					>
						<item.icon class='hidden size-6 md:block' />
						{item.title}
					</a>
				))
			}
		</nav>
	</div>
</header>

<style>
	#header {
		animation: bgBlur linear both;
		animation-timeline: scroll();
		animation-range: 0 100px;
	}

	@keyframes bgBlur {
		to {
			@apply border-b-main/30 shadow-main/5 bg-black/30 py-4 shadow-xl backdrop-blur-lg;
		}
	}
</style>

<script>
	document.addEventListener('astro:page-load', () => {
		const sections = document.querySelectorAll('section')
		const navItems = document.querySelectorAll('header nav a')

		const callback = (entries: any[]) => {
			entries.forEach((entry) => {
				if (entry.isIntersecting) {
					navItems.forEach((item) => {
						if (item.getAttribute('aria-label') == entry.target.id) {
							item.classList.add('text-accent')
						} else {
							item.classList.remove('text-accent')
						}
					})
				}
			})
		}

		const observer = new IntersectionObserver(callback, {
			root: null,
			rootMargin: '0px',
			threshold: 0.2,
		})

		sections.forEach((section) => {
			observer.observe(section)
		})

		document.onvisibilitychange = () => {
			if (document.visibilityState === 'hidden') {
				observer.disconnect()
			} else {
				sections.forEach((section) => {
					observer.observe(section)
				})
			}
		}
	})
</script>
